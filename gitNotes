>> Initializing git
-> We use 'git init' to initialize an empty git repository. For that we need to be in our desired folder or directory where we want to create our git repository. Now this folder will be tracked by git for any changes made to the folder.

>> Staging environment
-> After initialization we add file to the folder, then we stage them or add them to the 'staging environment'. 
To stage any change we use the command 'git add <fileName>'. 
-> If we want to add all the modifications done to various files, we use 'git add .'.
If we want to stage all the files including the deleted files, we use 'git add --all' or 'git add -A'. 

>> Git commit
-> After some handful changes staged, we need to commit using 'git commit -m "messge"' where '-m' includes a message for that commit. git commit is like a savepoint, where in the future if we stuck after doing some changes in our code, we can get back to this savepoint i.e commit. Including a clear commit message is important to know what commit contains what?.
-> If we change a minor change and if we want to directly commit the change without staging it, we can do so by using the command 'git commit -a -m "messge"'.
We can check the history of commits we made using 'git log'.
 
>> Git help
-> We can use 'git <command> -help' to get all the options available with the command (the 'command' needs to be replaced with the actual command like add, commit, e.t.c).
-> If we want to open the manual page for a specific command, we use 'git <command> --help' instead of 'git <command -help'.
-> The command 'git help --all' shows all the available various git commands out there.
While viewing the list of all the commands, we can navigate to the end of the list using 'SHIFT + G' and exit viewing the list by pressing 'q'.

>> Git branches
-> If we want to add any feature or modify our code but do not want to stuck if something goes wrong by adding that new feature, we create an another branch and begin to add the new feature on the newly created branch. 
-> Git command to create a new brach is 'git branch "newBranchName"'. After creating if we want to change the current branch to another branch to start working on it, we use 'git checkout <branchName>'. This changes the current branch to the branchName.
-> To delete any branch we use the command 'git branch -d <branchName>', where -d option indicates for branch deletion.
>> Git merging branches
-> Say we have two branches, and want to merge, we checkout to the master branch (or where the merging need to be happened), we use the command 'git merge <branchName>'.
-> Sometimes merging two branches leads to a merge conflict, in that case we manually open the editor and solve the conflict.

>> GitHub
-> We use github an online platform to host, share , collaborate, edit... our code. To use it we need to create an account on github.com using the same email account which we used in configuring our local git account.We then create a repository on github.
-> Now we need to connect our local repo and that one on github, to do so, we use the command 'git remote add origin https://github.com/user/repo-name'.
Here 'remote' indicates that we want to work with remote repositories, and 'add' is used to add a repo as origin to our local machine. origin is used to indicate remote repositories.

>> Associating local and remote branches
-> Once we have setup our local repo and connected it to our online repo on github (or some other platform), we now need to push or upload the content on our local repo to the online or remote repo. To do so, we use 'git push --set-upstream origin master' , indicates that we want to push what ever is on master to our origin, or online repo on github. 
After successful authentication we can see changes on github.

>> Pull 
-> We can also use the editor on the github website to update our code.Then we need to commit it. After doing so, we need to update our local repo on our local machine,once if we check 'git status' on our local repo, it seems to be clean. To get our local repo updated to the latest version of the available repo we use 'git fetch'. It fetches all the updates made to the repository online by us or our collaborators. We then need to reflect these changes to our local machine, we can achieve it so by using 'git merge origin/master', thus indicating that to merge our current local repo with the master branch on origin. 
-> So to get our local repo refreshed or updated, we need to use the 'fetch and merge' commands. But there is an easy way to achieve the same functionality using 'git pull origin' command. This single command fetches and merges the updated data.

